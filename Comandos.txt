//Criar arquivo package.json
npm init -y

//Instalar as dependencias do webpack e servidor embutido
npm i --save-dev webpack@1.14.0 webpack-dev-server@1.16.2

//Alternado o package.json com script para chamar o servidor do webpack
...

"scripts": {
    "dev": "webpack-dev-server --progress --colors --inline --hot"
},

....

//Para rodar 
npm run dev


//Instalando as dependencias do Babel (Transpiler)
//babel-core = modulo principal do babel
//babel-loader = interface entre o babel e o webpack
//babel-preset-es2015 = preset para codigo do es2015 para compatibilidade com browser
npm i --save-dev babel-core@6.22.1 babel-loader@6.2.10 babel-preset-es2015@6.22.0


//Instalando dependencias do Babel-Plugin para rest operator
npm i --save-dev babel-plugin-transform-object-rest-spread@6.22.0


//Adicionando o React e preset do React
npm i --save-dev react@15.4.2
npm i --save-dev babel-preset-react@6.22.0

**no webpack.config
module: {
	loaders: [{
	test: /.js?$/,
	loader: 'babel-loader',
	exclude: /node_modules/,
	query: {
	presets: ['es2015', 'react'],
	plugins: ['transform-object-rest-spread']
	}
	}]
}

//Adicionando loader para css

**no webpack.config
module.exports = {
  entry: './ex/index.js',
  output: {
  path: __dirname + '/public',
  filename: './bundle.js'
},
  devServer: {
  port: 8080,
  contentBase: './public'
},
  plugins: [
     new ExtractTextPlugin('app.css')
  ],
  module: {
  loaders: [{
      test: /.js?$/,
      loader: 'babel-loader',
      exclude: /node_modules/,
      query: {
      presets: ['es2015', 'react'],
      plugins: ['transform-object-rest-spread']
   }
},
  {
   test: /\.css$/,
   loader: ExtractTextPlugin.extract("style-loader", "css-loader")
  }]
}
}

-> Instalando dependencias
npm i --save-dev extract-text-webpack-plugin@1.0.1 style-loader@0.13.1 css-loader@0.26.1



**** EXERCICIOS COM REACT ****

//Instalar dependencias

npm i --save-dev react@15.4.2 react-dom@15.4.2 babel-core@6.22.1 babel-loader@6.2.10 babel-preset-es2015@6.22.0 babel-preset-react@6.22.0 webpack@1.14.0 webpack-dev-server@1.16.2




///url rest

GET|POST(urlEncoded) : http://localhost:3003/api/todos





--TODO-APP FRONTEND - instalacao das dependencias

#webpack
npm i --save-dev webpack@1.14.0 webpack-dev-server@1.16.2

#Babel
npm i --save-dev babel-core@6.22.1 babel-loader@6.2.10 babel-plugin-react-html-attrs@2.0.0 babel-plugin-transform-object-rest-spread@6.22.0 babel-preset-es2015@6.22.0 babel-preset-react@6.22.0

#CSS e Fileloader
npm i --save-dev extract-text-webpack-plugin@1.0.1 css-loader@0.26.1 style-loader@0.13.1 file-loader@0.9.0

#Bootstrap e FontAwesome
npm i -save-dev bootstrap@3.3.7 font-awesome@4.7.0

#React e Axios(Client http)
npm install --save-dev react@15.4.2 react-dom@15.4.2 react-router@3.0.2 axios@0.15.3



---TESTANDO BACKEND e FRONTEND (Integracao)

-> http://localhost:8080  (Frontend)
-> http://localhost:3003/api/todos  (Backend)





@My-Money-App (Backend) dependencias

express@4.14.0 
mongoose@4.7.0 
body-parser@1.15.2 
lodash@4.17.4 
mongoose-paginate@5.0.3 
express-query-int@1.0.1 
node-restful@0.2.5 
pm2@2.1.5

// npm i --save express@4.14.0 mongoose@4.7.0 body-parser@1.15.2 lodash@4.17.4 mongoose-paginate@5.0.3 express-query-int@1.0.1 node-restful@0.2.5 pm2@2.1.5 

//Dev dependencias
nodemon@1.11.0



//Testando backend Restful com Postman

[urlencoded]
name: janeiro/18
month: 11
year: 2018
credits[0][name]: Salario Empresa
credits[0][value]: 5000
credits[1][name]: Salario Professor
credits[1][value]: 2500
debits[0][name]: Conta Telefone
debts[0][value]: 150
debts[0][status]: PAGO
debts[1][name]: Condominio
debts[1][value]: 500
debts[1][status]: PENDENTE

//CORRECAO da falha ao consumir rota 'summary'
//Referente a Aula "Obtendo Sumario de Pagamentos"
//Se estiver usando MongoDB acima da Versao 3.0 dara este erro
//erro: The 'cursor' option is required, except for aggregate with the explain argument 

//Procedimento
//Pelo npm atualizar mongoose para 5.0.0

em BillingCycleService, a funcao devera ficar assim

//Rota para retornar sumario dos pagamentos
BillingCycle.route('summary', (req, res, next) => {
      BillingCycle.aggregate([
            { $project: {credit: {$sum: "$credits.value"}, debt: {$sum: "$debts.value"}} }, 
            { $group: {_id: null, credit: {$sum: "$credit"}, debt: {$sum: "$debt"}} }, 
            { $project: {_id: 0, credit: 1, debt: 1} }
      ]).exec((error, result) => {
          if(error) {
              res.status(500).json({errors: [error]})
          } else {
              res.json(result[0] || { credit: 0, debt: 0 })
          }
      })
  })



@Usando o Express-Query-Int
Aula 99
(Retirado da Node Restful referencia)
Limitando o número e pulando itens

Ao implementar a paginação, talvez você queira usar o recurso de 'skip' e 'limit'. Ambos fazem exatamente o que seu nome diz e apenas ignoram determinada quantidade de itens ou limitam a uma quantidade definida de itens.

//Exemplo
/users/?limit=5 will give you the first 5 items
/users/?skip=5 will skip the first 5 and give you the rest
/users/?limit=5&skip=5 will skip the first 5 and then give you the second 5

OBS: Necessario utilizar o middleware 'express-query-int'
para parsear o valor de 'limit' e 'skip' para um 'Inteiro'









